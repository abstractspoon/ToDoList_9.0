<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        rEEcf6xB
</value>
  </data>
</root>